<?xml version="1.0" encoding="UTF-8"?>
<project name="jquery-ui-editor" basedir="." default="build">
    
    <adhoc-task name="datauri">
        <![CDATA[
            class DataURI extends Task {

                private $filesets = array();

                public function main() {
                
                    // append any files in filesets
                    foreach($this->filesets as $fs) {
                        try {
                            $files = $fs->getDirectoryScanner($this->project)->getIncludedFiles();
                            foreach ($files as $file) {
                                $content = file_get_contents($file);
                                $content = preg_replace_callback('/url\((.*?)\.(png|jpe?g|gif)\)/i', function($matches) use($file) {
                                    $image = file_get_contents(dirname($file).'/'.$matches[1].'.'.$matches[2]);
                                    $image = base64_encode($image);
                                    return "url(data:image/$matches[2];base64,$image)";
                                }, $content);
                                file_put_contents($file, $content);
                            }
                        } catch (BuildException $be) {
                            $this->log($be->getMessage(), Project::MSG_WARN);
                        }
                    }
                }
                
                public function createFileSet() {
                    $num = array_push($this->filesets, new FileSet());
                    return $this->filesets[$num-1];
                }
                
            }
        ]]>
    </adhoc-task>
    
    <!-- =================================================================== -->
    <!-- Run a complete build                                                -->
    <!-- =================================================================== -->
    <target name="major" depends="build">
        <version releasetype="major" file="VERSION" property="version"/>
    </target>
    
    <target name="minor" depends="build">
        <version releasetype="minor" file="VERSION" property="version"/>
    </target>
    
    <target name="bugfix" depends="build">
        <version releasetype="bugfix" file="VERSION" property="version"/>
    </target>
    
    <target name="build" depends="package,targz,cleanup">
    </target>
    
    <target name="testbuild">
        <!-- Load properties -->
        <property file="build.properties" />
        <!-- Check properties -->
        <echo>${phing.project.name}</echo>
        <echo>${packagepath}</echo>
        <echo>${buildpath}</echo>
        <echo>${stripblocks}</echo>
    </target>
    
    <!-- =================================================================== -->
    <!-- Prepare for build                                                   -->
    <!-- =================================================================== -->
    <target name="prepare">
        <!-- Load properties -->
        <property file="build.properties" />
        <!-- Clean up previous build -->
        <delete file="${packagepath}/${phing.project.name}.tar.gz" />
        <delete dir="${buildpath}" 
                includeemptydirs="true" 
                failonerror="true" />
        <!-- Create new build directory -->
        <mkdir dir="${buildpath}" />
    </target>
    
    <target name="clone" depends="prepare">
        <!-- Copy all files needed files -->
        <copy todir="${buildpath}" >
            <fileset dir=".">
                <exclude name=".git" />
                <exclude name=".git/**" />
                <exclude name="vendor/**" />
                <exclude name="${buildpath}" />
                <exclude name="${buildpath}/**" />
                <exclude name="${packagepath}" />
                <exclude name="${packagepath}/**" />
                <include name="**/*" />
            </fileset>
        </copy>
    </target>
    
    <!-- =================================================================== -->
    <!-- Process files                                                       -->
    <!-- =================================================================== -->
    <target name="stripblocks" depends="prepare,clone">
        <reflexive>
            <fileset dir="${buildpath}">
                <include pattern="**/*" />
            </fileset>
            <filterchain>
                <!-- Replace the blocks using regex -->
                <replaceregexp>
                    <regexp pattern="//\s&lt;(${stripblocks})&gt;.*?//\s&lt;/(${stripblocks})&gt;" 
                            replace="// &lt;$1/&gt;" 
                            ignoreCase="true" 
                            multiline="true" />
                </replaceregexp>
            </filterchain>
        </reflexive>
    </target>
    
    <target name="pngout">
        <foreach param="fname" absparam="abs-fname" target="pngoutexec">
            <fileset dir=".">
                <include name="*.png" />
                <include name="**/*.png" />
            </fileset>
        </foreach>
    </target>
    
    <target name="pngoutexec">
        <exec command="pngout ${abs-fname}" logoutput="true" />
    </target>
    
    <target name="datauri" depends="prepare,clone">
        <datauri>
            <fileset dir=".">
                <include name="${buildpath}/*.css" />
                <include name="${buildpath}/**/*.css" />
            </fileset>
        </datauri>
    </target>
    
    <target name="combine" depends="datauri">
        <append destFile="${buildpath}/concat.js">
            <fileset dir=".">
                <exclude name="${buildpath}/concat.js" />
                <include name="${buildpath}/*.js" />
                <include name="${buildpath}/**/*.js" />
            </fileset>
        </append>
        <append destFile="${buildpath}/concat.css">
            <fileset dir=".">
                <exclude name="${buildpath}/concat.css" />
                <include name="${buildpath}/*.css" />
                <include name="${buildpath}/**/*.css" />
            </fileset>
        </append>
    </target>
    
    <target name="compile" depends="combine">
        <echo>java -jar vendor/Google/ClosureCompiler/compiler.jar --js ${buildpath}/concat.js --js_output_file ${buildpath}/concat.min.js</echo>
        <exec command="java -jar vendor/Google/ClosureCompiler/compiler.jar --js ${buildpath}/concat.js --js_output_file ${buildpath}/concat.min.js" dir="." />
        <echo>java -jar vendor\Yahoo\YUI\Compressor\build\yuicompressor-2.4.6.jar --type css -o ${buildpath}/concat.min.css ${buildpath}/concat.css</echo>
        <exec command="java -jar vendor\Yahoo\YUI\Compressor\build\yuicompressor-2.4.6.jar --type css -o ${buildpath}/concat.min.css ${buildpath}/concat.css" dir="." />
    </target>
    
    <target name="merge" depends="compile">
        <echo file="${buildpath}/merge.js" append="true">/*! VERSION: </echo>
        <append destFile="${buildpath}/merge.js">
            <fileset dir=".">
                <include name="${buildpath}/VERSION" />
            </fileset>
        </append>
        <echo file="${buildpath}/merge.js" append="true">
        </echo>
        <append destFile="${buildpath}/merge.js">
            <fileset dir=".">
                <include name="${buildpath}/LICENCE" />
            </fileset>
        </append>
        <echo file="${buildpath}/merge.js" append="true">*/</echo>
        <echo file="${buildpath}/merge.js" append="true"><![CDATA[jQuery('<style type="text/css">]]></echo>
        <append destFile="${buildpath}/merge.js">
            <fileset dir=".">
                <include name="${buildpath}/concat.min.css" />
            </fileset>
        </append>
        <echo file="${buildpath}/merge.js" append="true"><![CDATA[</style>').appendTo('head');]]></echo>
        <append destFile="${buildpath}/merge.js">
            <fileset dir=".">
                <include name="${buildpath}/concat.min.js" />
            </fileset>
        </append>
    </target>
    
    <!-- =================================================================== -->
    <!-- Package files                                                       -->
    <!-- =================================================================== -->
    <target name="package" depends="merge">
        <mkdir dir="${packagepath}" />
        <copy file="${buildpath}/merge.js" tofile="${packagepath}/jquery-ui-editor.build.js" />
    </target>
    
    <target name="targz" depends="package">
        <tar destfile="${packagepath}/${phing.project.name}.tar.gz" compression="gzip">
            <fileset dir="${packagepath}">
                <include name="jquery-ui-editor.build.js" />
            </fileset>
        </tar>
    </target>
    
    <!-- =================================================================== -->
    <!-- Cleanup files                                                       -->
    <!-- =================================================================== -->
    <target name="cleanup">
        <delete dir="${buildpath}" includeemptydirs="true" failonerror="true" />
    </target>
        
</project>
