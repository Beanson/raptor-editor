<?xml version="1.0" encoding="UTF-8" ?>
<project name="jQuery Raptor" basedir="." default="build">

    <!-- =================================================================== -->
    <!-- main build targets                                                  -->
    <!-- =================================================================== -->
    <target name="build">
        <phingcall target="stripblocks" />
        <phingcall target="copydeps" />
        <phingcall target="combine" />
        <phingcall target="compile" />
        <phingcall target="package" />
    </target>

    <target name="testbuild" depends="properties">
        <echo>${phing.project.name}</echo>
        <echo>${packagepath}</echo>
        <echo>${buildpath}</echo>
        <echo>${stripblocks}</echo>
        <echo>${theme}</echo>
        <echo>${plugins}</echo>
    </target>

    <!-- =================================================================== -->
    <!-- Prepare for build                                                   -->
    <!-- =================================================================== -->
    <target name="properties">
        <property file="build.properties" />
    </target>

    <target name="clean">
        <delete dir="${buildpath}" includeemptydirs="true" failonerror="true" />
        <delete dir="${packagepath}" includeemptydirs="true" failonerror="true" />
    </target>

    <target name="prepare">
        <!-- Clean up previous build -->
        <delete file="${packagepath}/${filename}.tar.gz" />
        <delete file="${packagepath}/${filename}" />
        <delete dir="${buildpath}"
                includeemptydirs="true"
                failonerror="true" />
        <!-- Create new build directory -->
        <mkdir dir="${buildpath}" />
    </target>

    <target name="clone" depends="properties,prepare">
        <!-- Copy all files needed files -->
        <copy todir="${buildpath}" >
            <fileset dir=".">
                <exclude name=".git" />
                <exclude name=".git/**" />
                <exclude name="jquery.ui.editor.loader.js" />
                <exclude name="docs/**" />
                <exclude name="vendor/**" />
                <exclude name="dependencies/**" />
                <exclude name="packages/**" />
                <exclude name="plugins/**" />
                <exclude name="${buildpath}" />
                <exclude name="${buildpath}/**" />
                <exclude name="${packagepath}" />
                <exclude name="${packagepath}/**" />
                <include name="**/*" />
            </fileset>
        </copy>

        <foreach list="${plugins}" param="plugin" target="cloneplugin"/>
    </target>

    <target name="cloneplugin">
        <echo>${plugin}</echo>
        <copy todir="${buildpath}" >
            <fileset dir=".">
                <include name="plugins/${plugin}/**" />
            </fileset>
        </copy>
    </target>

    <!-- =================================================================== -->
    <!-- Compress PNG iamges                                                 -->
    <!-- =================================================================== -->
    <target name="pngout">
        <foreach param="fname" absparam="abs-fname" target="pngoutexec">
            <fileset dir=".">
                <include name="*.png" />
                <include name="**/*.png" />
            </fileset>
        </foreach>
    </target>

    <target name="pngoutexec">
        <exec command="pngout ${abs-fname}" logoutput="true" />
    </target>

    <!-- =================================================================== -->
    <!-- Copy dependencies                                                   -->
    <!-- =================================================================== -->
    <target name="openwrapper" depends="properties,prepare">
        <!-- Append global wrapper open -->
        <if>
            <istrue value="${wrapper}"/>
            <then>
                <echo file="${buildpath}/99-wrapper-open.js" append="true">(function($, window, rangy, undefined) {</echo>
            </then>
        </if>
    </target>

    <target name="copydeps" depends="properties,prepare">
        <!-- Copy all dependancies and prefix a number to enforce load order -->

        <!-- jQuery -->
        <if><istrue value="${jquery}"/><then>
            <copy file="dependencies/jquery.js"
                  tofile="${buildpath}/01-jquery.js" />
        </then></if>

        <!-- jQuery UI -->
        <if><istrue value="${jquery-ui}"/><then>
            <copy file="dependencies/jquery-ui.js"
                  tofile="${buildpath}/02-jquery-ui.js" />
        </then></if>

        <!-- jQuery plugins -->
        <if><istrue value="${jquery-cookie}"/><then>
            <copy file="dependencies/jquery.cookie.js"
                  tofile="${buildpath}/04-jquery-cookie.js" />
        </then></if>

        <!-- TipTip -->
        <if><istrue value="${jquery-tiptip}"/><then>
            <copy file="dependencies/tiptip/jquery.tipTip.js"
                  tofile="${buildpath}/05-jquery-tipTip.js" />
            <copy file="dependencies/tiptip/tipTip.css"
                  tofile="${buildpath}/02-theme/tipTip.css" />
        </then></if>

        <!-- jQuery Event Drag -->
        <if><istrue value="${jquery-event-drag}"/><then>
            <copy file="dependencies/jquery.event.drag-2.0.js"
                  tofile="${buildpath}/04-jquery-event-drag.js" />
        </then></if>

        <!-- Rangy -->
        <if><istrue value="${rangy}"/><then>
            <copy file="dependencies/rangy/rangy-core.js"
                  tofile="${buildpath}/06-rangy-core.js" />
            <copy file="dependencies/rangy/rangy-cssclassapplier.js"
                  tofile="${buildpath}/07-rangy-cssclassapplier.js" />
            <copy file="dependencies/rangy/rangy-selectionsaverestore.js"
                  tofile="${buildpath}/08-rangy-selectionsaverestore.js" />
            <copy file="dependencies/rangy/rangy-serializer.js"
                  tofile="${buildpath}/09-rangy-serializer.js" />
        </then></if>

        <!-- Raptorize -->
        <if><istrue value="${raptorize}"/><then>
            <copy file="dependencies/raptorize/jquery.raptorize.js"
                  tofile="${buildpath}/10-raptorize.js" />
        </then></if>

        <!-- CSS -->
        <if><istrue value="${jquery-ui-theme}"/><then>
            <copy todir="${buildpath}/01-theme">
                <fileset dir=".">
                    <include name="dependencies/themes/${theme}/jquery-ui.css" />
                    <include name="dependencies/themes/${theme}/images/**/*" />
                </fileset>
            </copy>
        </then></if>
    </target>

    <!-- =================================================================== -->
    <!-- Strip debug/strict blocks                                           -->
    <!-- =================================================================== -->
    <target name="stripblocks" depends="properties,prepare,clone">
        <echo>Stripping blocks ${stripblocks}</echo>
        <reflexive>
            <fileset dir="${buildpath}">
                <include pattern="**/*" />
            </fileset>
            <filterchain>
                <!-- Replace the blocks using regex -->
                <replaceregexp>
                    <regexp pattern="//\s&lt;(${stripblocks})&gt;.*?//\s&lt;/(${stripblocks})&gt;"
                            replace="// &lt;$1/&gt;"
                            ignoreCase="true"
                            multiline="true" />
                </replaceregexp>
            </filterchain>
        </reflexive>
    </target>

    <!-- =================================================================== -->
    <!-- Convert LESS to CSS                                                 -->
    <!-- =================================================================== -->
    <target name="less" depends="properties,prepare,clone">
        <less>
            <fileset dir=".">
                <include name="${buildpath}/*.less" />
                <include name="${buildpath}/**/*.less" />
            </fileset>
        </less>
    </target>

    <!-- =================================================================== -->
    <!-- Convert images to data URIs                                         -->
    <!-- =================================================================== -->
    <target name="datauri" depends="properties,prepare,clone">
        <datauri>
            <fileset dir=".">
                <include name="${buildpath}/*.css" />
                <include name="${buildpath}/**/*.css" />
            </fileset>
        </datauri>
    </target>

    <!-- =================================================================== -->
    <!-- Convert HTML templates to JSON                                      -->
    <!-- =================================================================== -->
    <target name="template" depends="properties,prepare,clone">
        <template name="templates">
            <fileset dir=".">
                <include name="${buildpath}/*.html" />
                <include name="${buildpath}/**/*.html" />
            </fileset>
        </template>

        <reflexive>
            <fileset dir=".">
                <include name="${buildpath}/jquery.ui.editor.js" />
            </fileset>
            <filterchain>
                <!-- Escape quotes -->
                <replaceregexp>
                    <regexp pattern="\/\* &lt;templates\/&gt; \*\/" replace="${templates}"/>
                </replaceregexp>
            </filterchain>
        </reflexive>
    </target>

    <!-- =================================================================== -->
    <!-- Combine and minify all files                                        -->
    <!-- =================================================================== -->
    <target name="combine" depends="properties,less,datauri,template,openwrapper">
        <sortedfileset name="jsfiles">
            <fileset dir=".">
                <exclude name="${buildpath}/concat.js" />
                <include name="${buildpath}/*.js" />
                <include name="${buildpath}/**/*.js" />
            </fileset>
        </sortedfileset>
        <append destFile="${buildpath}/concat.js">
            <filelist dir="." files="${jsfiles}"/>
        </append>

        <!-- Append global wrapper close -->
        <if>
            <istrue value="${wrapper}"/>
            <then>
                <echo file="${buildpath}/concat.js" append="true">})(jQuery, window, rangy);</echo>
            </then>
        </if>

        <sortedfileset name="cssfiles">
            <fileset dir=".">
                <exclude name="${buildpath}/concat.css" />
                <include name="${buildpath}/*.css" />
                <include name="${buildpath}/**/*.css" />
            </fileset>
        </sortedfileset>
        <echo>${cssfiles}</echo>
        <append destFile="${buildpath}/concat.css">
            <filelist dir="." files="${cssfiles}"/>
        </append>
    </target>

    <target name="compile" depends="properties,combine">
        <if>
            <istrue value="${compile-js}"/>
            <then>
                <echo>closure --js ${buildpath}/concat.js --js_output_file ${buildpath}/concat.min.js</echo>
                <exec command="closure ${closure-options} --js ${buildpath}/concat.js --js_output_file ${buildpath}/concat.min.js"
                      dir="." level="info" outputProperty="output"/>
                <echo>${output}</echo>
            </then>
            <else>
                <move file="${buildpath}/concat.js" tofile="${buildpath}/concat.min.js"/>
            </else>
        </if>
        <if>
            <istrue value="${compile-css}"/>
            <then>
                <echo>yui-compressor --type css -o ${buildpath}/concat.min.css ${buildpath}/concat.css</echo>
                <exec command="yui-compressor --type css -o ${buildpath}/concat.min.css ${buildpath}/concat.css"
                      dir="." level="info" outputProperty="output"/>
                <echo>${output}</echo>
            </then>
            <else>
                <move file="${buildpath}/concat.css" tofile="${buildpath}/concat.min.css"/>
            </else>
        </if>
    </target>

    <target name="merge" depends="properties,prepare">
        <!-- Append VERSION file in a comment -->
        <echo file="${buildpath}/merge.js" append="true">/*! VERSION: </echo>
        <append destFile="${buildpath}/merge.js">
            <fileset dir=".">
                <include name="${buildpath}/VERSION" />
            </fileset>
        </append>
        <!-- Append a new line -->
        <echo file="${buildpath}/merge.js" append="true">
        </echo>
        <!-- Append LICENCE file in the same comment -->
        <append destFile="${buildpath}/merge.js">
            <fileset dir=".">
                <include name="${buildpath}/LICENCE" />
            </fileset>
        </append>
        <echo file="${buildpath}/merge.js" append="true">*/</echo>
        <!-- Close the comment -->

        <!-- Append the merged JS -->
        <append destFile="${buildpath}/merge.js">
            <fileset dir=".">
                <include name="${buildpath}/concat.min.js" />
            </fileset>
        </append>

        <!-- Append the style inserter -->
        <echo file="${buildpath}/merge.js" append="true"><![CDATA[jQuery('<style type="text/css">]]></echo>

        <reflexive>
            <fileset dir="${buildpath}">
                <include pattern="concat.min.css" />
            </fileset>
            <filterchain>
                <!-- Escape quotes -->
                <replaceregexp>
                    <regexp pattern="'" replace="\'"/>
                    <regexp pattern="\n" replace="\n\${line.separator}"/>
                </replaceregexp>
            </filterchain>
        </reflexive>
        <append destFile="${buildpath}/merge.js">
            <fileset dir=".">
                <include name="${buildpath}/concat.min.css" />
            </fileset>
        </append>
        <echo file="${buildpath}/merge.js" append="true"><![CDATA[</style>').appendTo('head');]]></echo>
    </target>

    <!-- =================================================================== -->
    <!-- Package files                                                       -->
    <!-- =================================================================== -->
    <target name="package" depends="properties,merge">
        <mkdir dir="${packagepath}" />
        <copy file="${buildpath}/merge.js" tofile="${packagepath}/${filename}" />
        <echo>${packagepath}/${filename}</echo>
    </target>

    <target name="targz" depends="package">
    </target>

    <!-- =================================================================== -->
    <!-- Cleanup files                                                       -->
    <!-- =================================================================== -->
    <target name="cleanup">
        <delete dir="${buildpath}" includeemptydirs="true" failonerror="true" />
    </target>

    <adhoc-task name="datauri">
        require_once 'classes/DataURI.php';
    </adhoc-task>

    <adhoc-task name="sortedfileset">
        require_once 'classes/SortedFileSet.php';
    </adhoc-task>

    <adhoc-task name="less">
        require_once 'classes/LessTask.php';
    </adhoc-task>

    <adhoc-task name="template">
        require_once 'classes/TemplateTask.php';
    </adhoc-task>

</project>
