<?xml version="1.0" encoding="UTF-8" ?>
<project name="jquery-ui-editor" basedir="." default="build">
    
    <adhoc-task name="datauri">
        <![CDATA[
            class DataURI extends Task {

                private $filesets = array();

                public function main() {
                    foreach($this->filesets as $fs) {
                        try {
                            $files = $fs->getDirectoryScanner($this->project)->getIncludedFiles();
                            foreach ($files as $file) {
                                $content = file_get_contents($file);
                                $content = preg_replace_callback('/url\((.*?)\.(png|jpe?g|gif)\)/i', function($matches) use($file) {
                                    $image = file_get_contents(dirname($file).'/'.$matches[1].'.'.$matches[2]);
                                    $image = base64_encode($image);
                                    return "url(data:image/$matches[2];base64,$image)";
                                }, $content);
                                file_put_contents($file, $content);
                            }
                        } catch (BuildException $be) {
                            $this->log($be->getMessage(), Project::MSG_WARN);
                        }
                    }
                }
                
                public function createFileSet() {
                    $num = array_push($this->filesets, new FileSet());
                    return $this->filesets[$num-1];
                }
                
            }
        ]]>
    </adhoc-task>
    
    <adhoc-task name="sortedfileset">
        <![CDATA[
            class SortedFileSet extends Task {

                private $filesets = array();
                private $name = null;

                public function main() {
                    foreach($this->filesets as $fs) {
                        try {
                            $files = $fs->getDirectoryScanner($this->project)->getIncludedFiles();
                            sort($files);
                            $this->project->setProperty($this->name, implode(',', $files));
                        } catch (BuildException $be) {
                            $this->log($be->getMessage(), Project::MSG_WARN);
                        }
                    }
                }
                
                public function createFileSet() {
                    $num = array_push($this->filesets, new FileSet());
                    return $this->filesets[$num-1];
                }
                
                public function setName($name) {
                    $this->name = (string) $name;
                }

                public function getName() {
                    return $this->name;
                }
            }
        ]]>
    </adhoc-task>
    
    <adhoc-task name="less">
        <![CDATA[
            class LessTask extends Task {

                private $filesets = array();

                public function main() {
                    require_once $this->project->getBasedir() . '/dependencies/lessc.inc.php';
                    foreach($this->filesets as $fs) {
                        try {
                            $files = $fs->getDirectoryScanner($this->project)->getIncludedFiles();
                            foreach ($files as $file) {
                                lessc::ccompile($file, $file . '.css');
                            }
                        } catch (BuildException $be) {
                            $this->log($be->getMessage(), Project::MSG_WARN);
                        }
                    }
                }
                
                public function createFileSet() {
                    $num = array_push($this->filesets, new FileSet());
                    return $this->filesets[$num-1];
                }
            }
        ]]>
    </adhoc-task>
    
    <adhoc-task name="template">
        <![CDATA[
            class TemplateTask extends Task {

                private $filesets = array();
                private $name = null;

                public function main() {
                    $result = array();
                    foreach($this->filesets as $fs) {
                        try {
                            $files = $fs->getDirectoryScanner($this->project)->getIncludedFiles();
                            foreach ($files as $file) {
                                $preg = array();
                                preg_match('/build[\/\\\\]{1}plugins[\/\\\\]{1}(.*?)[\/\\\\]{1}templates[\/\\\\]{1}(.*?)\\.html/i', $file, $preg);
                                if (isset($preg[1]) && isset($preg[2])) {
                                    $name = $preg[1] . '.' . $preg[2];
                                } else {
                                    $name = substr(basename($file), 0, -5);
                                }
                                
                                $content = json_encode(file_get_contents($file));
                                $result[] = "'$name': $content";
                            }
                        } catch (BuildException $be) {
                            $this->log($be->getMessage(), Project::MSG_WARN);
                        }
                    }
                    $this->project->setProperty($this->name, implode(',', $result));
                }
                
                public function createFileSet() {
                    $num = array_push($this->filesets, new FileSet());
                    return $this->filesets[$num-1];
                }
                
                public function setName($name) {
                    $this->name = (string) $name;
                }

                public function getName() {
                    return $this->name;
                }
            }
        ]]>
    </adhoc-task>
    
    <!-- =================================================================== -->
    <!-- Run a complete build                                                -->
    <!-- =================================================================== -->
    <target name="build" depends="stripblocks,combine,compile,package,targz">
    </target>
    
    <target name="0deps" depends="stripblocks,copydeps,combine,compile,targz,cleanup">
    </target>
    
    <target name="testbuild">
        <!-- Load properties -->
        <property file="build.properties" />
        <!-- Check properties -->
        <echo>${phing.project.name}</echo>
        <echo>${packagepath}</echo>
        <echo>${buildpath}</echo>
        <echo>${stripblocks}</echo>
        <echo>${theme}</echo>
    </target>
    
    <!-- =================================================================== -->
    <!-- Prepare for build                                                   -->
    <!-- =================================================================== -->
    <target name="prepare">
        <!-- Load properties -->
        <property file="build.properties" />
        <!-- Clean up previous build -->
        <delete file="${packagepath}/${filename}.tar.gz" />
        <delete file="${packagepath}/${filename}" />
        <delete dir="${buildpath}" 
                includeemptydirs="true" 
                failonerror="true" />
        <!-- Create new build directory -->
        <mkdir dir="${buildpath}" />
    </target>
    
    <target name="clone" depends="prepare">
        <!-- Copy all files needed files -->
        <copy todir="${buildpath}" >
            <fileset dir=".">
                <exclude name=".git" />
                <exclude name=".git/**" />
                <exclude name="docs/**" />
                <exclude name="vendor/**" />
                <exclude name="dependencies/**" />
                <exclude name="${buildpath}" />
                <exclude name="${buildpath}/**" />
                <exclude name="${packagepath}" />
                <exclude name="${packagepath}/**" />
                <include name="**/*" />
            </fileset>
        </copy>
    </target>
    
    <!-- =================================================================== -->
    <!-- Compress PNG iamges                                                 -->
    <!-- =================================================================== -->
    <target name="pngout">
        <foreach param="fname" absparam="abs-fname" target="pngoutexec">
            <fileset dir=".">
                <include name="*.png" />
                <include name="**/*.png" />
            </fileset>
        </foreach>
    </target>
    
    <target name="pngoutexec">
        <exec command="pngout ${abs-fname}" logoutput="true" />
    </target>
    
    <!-- =================================================================== -->
    <!-- Copy dependencies                                                   -->
    <!-- =================================================================== -->
    <target name="openwrapper" depends="prepare">
        <!-- Append global wrapper open -->
        <if>
            <istrue value="${wrapper}"/>
            <then>
                <echo file="${buildpath}/99-wrapper-open.js" append="true">(function($, window, rangy, undefined) {</echo>
            </then>
        </if>    
    </target>
    
    <target name="copydeps" depends="prepare">
        <!-- Copy all dependancies and prefix a number to enforce load order -->
        
        <!-- jQuery -->
        <if><istrue value="${no-jquery}"/><then></then><else>
            <copy file="dependencies/jquery.js" 
                  tofile="${buildpath}/01-jquery.js" />
        </else></if>
        
        <!-- jQuery plugins -->
        <if><istrue value="${no-jquery-cookie}"/><then></then><else>
            <copy file="dependencies/jquery.cookie.js" 
                  tofile="${buildpath}/04-jquery-cookie.js" />
        </else></if>
        
        <!-- TipTip -->
        <if><istrue value="${no-jquery-tiptip}"/><then></then><else>
            <copy file="dependencies/tiptip/jquery.tiptip.js" 
                  tofile="${buildpath}/05-jquery-tiptip.js" />
            <copy file="dependencies/tiptip/tiptip.css" 
                  tofile="${buildpath}/02-theme/tiptip.css" />
        </else></if>
              
        <!-- jQuery UI -->
        <if><istrue value="${no-jquery-ui}"/><then></then><else>
            <copy file="dependencies/jquery-ui.js" 
                  tofile="${buildpath}/02-jquery-ui.js" />
        </else></if>
              
        <!-- Rangy -->
        <if><istrue value="${no-rangy}"/><then></then><else>
            <copy file="dependencies/rangy/rangy-core.js" 
                  tofile="${buildpath}/06-rangy-core.js" />
            <copy file="dependencies/rangy/rangy-cssclassapplier.js" 
                  tofile="${buildpath}/07-rangy-cssclassapplier.js" />
            <copy file="dependencies/rangy/rangy-selectionsaverestore.js" 
                  tofile="${buildpath}/08-rangy-selectionsaverestore.js" />
            <copy file="dependencies/rangy/rangy-serializer.js" 
                  tofile="${buildpath}/09-rangy-serializer.js" />
        </else></if>
        
        <!-- CSS -->
        <if><istrue value="${no-jquery-ui-theme}"/><then></then><else>
            <copy todir="${buildpath}/01-theme">
                <fileset dir=".">
                    <include name="dependencies/themes/${theme}/jquery-ui.css" />
                    <include name="dependencies/themes/${theme}/images/**/*" />
                </fileset>  
            </copy>
        </else></if>
    </target>
    
    <!-- =================================================================== -->
    <!-- Strip debug/strict blocks                                           -->
    <!-- =================================================================== -->
    <target name="stripblocks" depends="prepare,clone">
        <reflexive>
            <fileset dir="${buildpath}">
                <include pattern="**/*" />
            </fileset>
            <filterchain>
                <!-- Replace the blocks using regex -->
                <replaceregexp>
                    <regexp pattern="//\s&lt;(${stripblocks})&gt;.*?//\s&lt;/(${stripblocks})&gt;" 
                            replace="// &lt;$1/&gt;" 
                            ignoreCase="true" 
                            multiline="true" />
                </replaceregexp>
            </filterchain>
        </reflexive>
    </target>
    
    <!-- =================================================================== -->
    <!-- Convert LESS to CSS                                                 -->
    <!-- =================================================================== -->
    <target name="less" depends="prepare,clone">
        <less>
            <fileset dir=".">
                <include name="${buildpath}/*.less" />
                <include name="${buildpath}/**/*.less" />
            </fileset>
        </less>
    </target>
    
    <!-- =================================================================== -->
    <!-- Convert images to data URIs                                         -->
    <!-- =================================================================== -->
    <target name="datauri" depends="prepare,clone">
        <datauri>
            <fileset dir=".">
                <include name="${buildpath}/*.css" />
                <include name="${buildpath}/**/*.css" />
            </fileset>
        </datauri>
    </target>
    
    <!-- =================================================================== -->
    <!-- Convert HTML templates to JSON                                      -->
    <!-- =================================================================== -->
    <target name="template" depends="prepare,clone">
        <template name="templates">
            <fileset dir=".">
                <include name="${buildpath}/*.html" />
                <include name="${buildpath}/**/*.html" />
            </fileset>
        </template>
        
        <reflexive>
            <fileset dir=".">
                <include name="${buildpath}/jquery.ui.editor.js" />
            </fileset>
            <filterchain>
                <!-- Escape quotes -->
                <replaceregexp>
                    <regexp pattern="\/\* &lt;templates\/&gt; \*\/" replace="${templates}"/>
                </replaceregexp>
            </filterchain>
        </reflexive>
    </target>
    
    <!-- =================================================================== -->
    <!-- Combine and minify all files                                        -->
    <!-- =================================================================== -->
    <target name="combine" depends="less,datauri,template,openwrapper">
        <sortedfileset name="jsfiles">
            <fileset dir=".">
                <exclude name="${buildpath}/concat.js" />
                <include name="${buildpath}/*.js" />
                <include name="${buildpath}/**/*.js" />
            </fileset>
        </sortedfileset>
        <append destFile="${buildpath}/concat.js">
            <filelist dir="." files="${jsfiles}"/>
        </append>
        
        <!-- Append global wrapper close -->
        <if>
            <istrue value="${wrapper}"/>
            <then>
                <echo file="${buildpath}/concat.js" append="true">})(jQuery, window, rangy);</echo>
            </then>
        </if>
        
        <sortedfileset name="cssfiles">
            <fileset dir=".">
                <exclude name="${buildpath}/concat.css" />
                <include name="${buildpath}/*.css" />
                <include name="${buildpath}/**/*.css" />
            </fileset>
        </sortedfileset>
        <echo>${cssfiles}</echo>
        <append destFile="${buildpath}/concat.css">
            <filelist dir="." files="${cssfiles}"/>
        </append>
    </target>
    
    <target name="compile" depends="combine">
        <if>
            <istrue value="${compile-js}"/>
            <then>
                <echo>java -jar vendor/Google/ClosureCompiler/compiler.jar --js ${buildpath}/concat.js --js_output_file ${buildpath}/concat.min.js</echo>
                <exec command="java -jar vendor/Google/ClosureCompiler/compiler.jar --js ${buildpath}/concat.js --js_output_file ${buildpath}/concat.min.js" 
                      dir="." level="info" outputProperty="output"/>
                <echo>${output}</echo>
            </then>
            <else>
                <move file="${buildpath}/concat.js" tofile="${buildpath}/concat.min.js"/>
            </else>
        </if>
        <if>
            <istrue value="${compile-css}"/>
            <then>
                <echo>java -jar vendor/Yahoo/YUI/Compressor/build/yuicompressor-2.4.6.jar --type css -o ${buildpath}/concat.min.css ${buildpath}/concat.css</echo>
                <exec command="java -jar vendor/Yahoo/YUI/Compressor/build/yuicompressor-2.4.6.jar --type css -o ${buildpath}/concat.min.css ${buildpath}/concat.css" 
                      dir="." level="info" outputProperty="output"/>
                <echo>${output}</echo>
            </then>
            <else>
                <move file="${buildpath}/concat.css" tofile="${buildpath}/concat.min.css"/>
            </else>
        </if>
    </target>
    
    <target name="merge" depends="template">
        <!-- Append VERSION file in a comment -->
        <echo file="${buildpath}/merge.js" append="true">/*! VERSION: </echo>
        <append destFile="${buildpath}/merge.js">
            <fileset dir=".">
                <include name="${buildpath}/VERSION" />
            </fileset>
        </append>
        <!-- Append a new line -->
        <echo file="${buildpath}/merge.js" append="true">
        </echo>
        <!-- Append LICENCE file in the same comment -->
        <append destFile="${buildpath}/merge.js">
            <fileset dir=".">
                <include name="${buildpath}/LICENCE" />
            </fileset>
        </append>
        <echo file="${buildpath}/merge.js" append="true">*/</echo>
        <!-- Close the comment -->
        
        <!-- Append the merged JS -->
        <append destFile="${buildpath}/merge.js">
            <fileset dir=".">
                <include name="${buildpath}/concat.min.js" />
            </fileset>
        </append>
        
        <!-- Append the style inserter -->
        <echo file="${buildpath}/merge.js" append="true"><![CDATA[jQuery('<style type="text/css">]]></echo>
        
        <reflexive>
            <fileset dir="${buildpath}">
                <include pattern="concat.min.css" />
            </fileset>
            <filterchain>
                <!-- Escape quotes -->
                <replaceregexp>
                    <regexp pattern="'" replace="\'"/>
                    <regexp pattern="\n" replace="\n\${line.separator}"/>
                </replaceregexp>
            </filterchain>
        </reflexive>
        <append destFile="${buildpath}/merge.js">
            <fileset dir=".">
                <include name="${buildpath}/concat.min.css" />
            </fileset>
        </append>
        <echo file="${buildpath}/merge.js" append="true"><![CDATA[</style>').appendTo('head');]]></echo>
    </target>
    
    <!-- =================================================================== -->
    <!-- Package files                                                       -->
    <!-- =================================================================== -->
    <target name="package" depends="merge">
        <mkdir dir="${packagepath}" />
        <copy file="${buildpath}/merge.js" tofile="${packagepath}/${filename}" />
        <echo>${packagepath}/${filename}</echo>
    </target>
    
    <target name="targz" depends="package">
        <tar destfile="${packagepath}/${filename}.tar.gz" compression="gzip">
            <fileset dir="${packagepath}">
                <include name="${filename}" />
            </fileset>
        </tar>
    </target>
    
    <!-- =================================================================== -->
    <!-- Cleanup files                                                       -->
    <!-- =================================================================== -->
    <target name="cleanup">
        <delete dir="${buildpath}" includeemptydirs="true" failonerror="true" />
    </target>
        
</project>
