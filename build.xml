<?xml version="1.0" encoding="UTF-8" ?>
<project name="jQuery Raptor" default="build">
    <property file="build.properties" />

    <!-- =================================================================== -->
    <!-- main build targets                                                  -->
    <!-- =================================================================== -->
    <target name="build">
        <phingcall target="clean" />
        <phingcall target="clone" />
        <phingcall target="strip-blocks" />
        <phingcall target="version" />
        <phingcall target="copy-dependencies" />
        <phingcall target="combine" />
        <phingcall target="compile" />
        <phingcall target="merge" />
        <phingcall target="package" />
    </target>

    <target name="testbuild">
        <echo>${phing.project.name}</echo>
        <echo>${project.basedir}</echo>
        <echo>${packagepath}</echo>
        <echo>${buildpath}</echo>
        <echo>${strip.blocks}</echo>
        <echo>${theme}</echo>
        <echo>${plugins}</echo>
    </target>

    <target name="theme">
        <exec command="sass --compass theme.scss theme.css" logoutput="true" dir="src/theme" />
    </target>

    <!-- =================================================================== -->
    <!-- Compress PNG images                                                 -->
    <!-- =================================================================== -->
    <target name="pngout">
        <foreach param="input.file.name" absparam="input.file" target="pngout-exec">
            <fileset dir="src">
                <include name="*.png" />
                <include name="**/*.png" />
            </fileset>
        </foreach>
    </target>

    <!-- =================================================================== -->
    <!-- Development build                                                   -->
    <!-- =================================================================== -->
    <target name="dev">
        <phingcall target="clean" />
        <phingcall target="dev-clone" />
        <phingcall target="datauri" />
    </target>

    <target name="dev-clone">
        <copy todir="${buildpath}" >
            <fileset dir="src">
                <include name="**/*" />
                <exclude name="dependencies/**" />
            </fileset>
        </copy>
    </target>

    <!-- =================================================================== -->
    <!-- Prepare for build                                                   -->
    <!-- =================================================================== -->
    <target name="clean">
        <delete dir="${buildpath}" includeemptydirs="true" failonerror="true" />
        <delete dir="${packagepath}" includeemptydirs="true" failonerror="true" />
        <mkdir dir="${buildpath}" />
        <mkdir dir="${packagepath}" />
    </target>

    <target name="clone" depends="theme">
        <!-- Copy all source files excluding plugins -->
        <copy todir="${buildpath}" >
            <fileset dir="src">
                <include name="**/*" />
                <exclude name="**/*.php" />
                <exclude name="dependencies/**" />
                <exclude name="plugins/**" />
                <exclude name="theme/**" />
                <exclude name="jquery.ui.editor.loader.js" />
            </fileset>
        </copy>
        <copy todir="${buildpath}" >
            <fileset dir="src">
                <include name="theme/theme.css" />
            </fileset>
        </copy>

        <!-- Copy specified plugins -->
        <foreach list="${plugins}" param="plugin" target="clone-plugin" />
    </target>

    <target name="clone-plugin">
        <echo>${plugin}</echo>
        <copy todir="${buildpath}" >
            <fileset dir="src">
                <include name="plugins/${plugin}/**" />
            </fileset>
        </copy>
    </target>

    <target name="pngout-exec">
        <exec command="pngout ${input.file}" logoutput="true" />
    </target>

    <!-- =================================================================== -->
    <!-- Strip debug/strict blocks                                           -->
    <!-- =================================================================== -->
    <target name="strip-blocks">
        <echo>Stripping blocks ${strip.blocks}</echo>
        <reflexive>
            <fileset dir="${buildpath}">
                <include pattern="**/*" />
            </fileset>
            <filterchain>
                <!-- Replace the blocks using regex -->
                <replaceregexp>
                    <regexp pattern="//\s&lt;(${strip.blocks})&gt;.*?//\s&lt;/(${strip.blocks})&gt;"
                            replace="// &lt;$1/&gt;"
                            ignoreCase="true"
                            multiline="true" />
                </replaceregexp>
            </filterchain>
        </reflexive>
    </target>

    <!-- =================================================================== -->
    <!-- Replace version token with current version string                   -->
    <!-- =================================================================== -->
    <target name="version">
        <echo>Replacing version token ${version}</echo>
        <reflexive>
            <fileset dir="${buildpath}">
                <include pattern="**/*" />
            </fileset>
            <filterchain>
                <!-- Replace the blocks using regex -->
                <replaceregexp>
                    <regexp pattern="VERSION" replace="${version}" />
                </replaceregexp>
            </filterchain>
        </reflexive>
    </target>

    <!-- =================================================================== -->
    <!-- Copy dependencies                                                   -->
    <!-- =================================================================== -->
    <target name="copy-dependencies">
        <!-- Copy all dependencies and prefix a number to enforce load order -->

        <!-- Rangy -->
        <if><istrue value="${rangy}" /><then>
            <copy file="${dir.deps}/rangy/rangy-core.js"
                  tofile="${buildpath}/01-rangy-core.js" />
            <copy file="${dir.deps}/rangy/rangy-cssclassapplier.js"
                  tofile="${buildpath}/02-rangy-cssclassapplier.js" />
            <copy file="${dir.deps}/rangy/rangy-selectionsaverestore.js"
                  tofile="${buildpath}/03-rangy-selectionsaverestore.js" />
            <copy file="${dir.deps}/rangy/rangy-serializer.js"
                  tofile="${buildpath}/04-rangy-serializer.js" />
        </then></if>

        <!-- jQuery -->
        <if><istrue value="${jquery}" /><then>
            <copy file="${dir.deps}/jquery.js"
                  tofile="${buildpath}/05-jquery.js" />
        </then></if>

        <!-- jQuery UI -->
        <if><istrue value="${jquery-ui}" /><then>
            <copy file="${dir.deps}/jquery-ui.js"
                  tofile="${buildpath}/06-jquery-ui.js" />
        </then></if>

        <!-- Raptorize -->
        <if><istrue value="${raptorize}" /><then>
            <copy file="${dir.deps}/raptorize/jquery.raptorize.js"
                  tofile="${buildpath}/10-raptorize.js" />
        </then></if>

        <!-- CSS -->
        <if><istrue value="${jquery-ui-theme}" /><then>
            <copy todir="${buildpath}/01-theme">
                <fileset dir=".">
                    <include name="${dir.deps}/themes/${theme}/jquery-ui.css" />
                    <include name="${dir.deps}/themes/${theme}/images/**/*" />
                </fileset>
            </copy>
        </then></if>
    </target>

    <!-- =================================================================== -->
    <!-- Convert images to data URIs                                         -->
    <!-- =================================================================== -->
    <target name="datauri">
        <datauri>
            <fileset dir=".">
                <include name="${buildpath}/*.css" />
                <include name="${buildpath}/**/*.css" />
            </fileset>
        </datauri>
    </target>

    <!-- =================================================================== -->
    <!-- Convert HTML templates to JSON                                      -->
    <!-- =================================================================== -->
    <target name="template">
        <template name="templates">
            <fileset dir=".">
                <include name="${buildpath}/*.html" />
                <include name="${buildpath}/**/*.html" />
            </fileset>
        </template>

        <reflexive>
            <fileset dir=".">
                <include name="${buildpath}/jquery.ui.editor.js" />
            </fileset>
            <filterchain>
                <!-- Escape quotes -->
                <replaceregexp>
                    <regexp pattern="\/\* &lt;templates\/&gt; \*\/" replace="${templates}" />
                </replaceregexp>
            </filterchain>
        </reflexive>
    </target>

    <!-- =================================================================== -->
    <!-- Combine all files                                                   -->
    <!-- =================================================================== -->
    <target name="combine" depends="datauri,template,open-wrapper">
        <sortedfileset name="jsfiles">
            <fileset dir=".">
                <exclude name="${buildpath}/concat.js" />
                <include name="${buildpath}/*.js" />
                <include name="${buildpath}/**/*.js" />
            </fileset>
        </sortedfileset>
        <append destFile="${buildpath}/concat.js">
            <filelist dir="." files="${jsfiles}" />
        </append>

        <!-- Append global wrapper close -->
        <if>
            <istrue value="${wrapper}" />
            <then>
                <echo file="${buildpath}/concat.js" append="true">})(jQuery, window, rangy);</echo>
            </then>
        </if>

        <sortedfileset name="cssfiles">
            <fileset dir=".">
                <exclude name="${buildpath}/concat.css" />
                <include name="${buildpath}/*.css" />
                <include name="${buildpath}/**/*.css" />
            </fileset>
        </sortedfileset>
        <echo>${cssfiles}</echo>
        <append destFile="${buildpath}/concat.css">
            <filelist dir="." files="${cssfiles}" />
        </append>
    </target>

    <target name="open-wrapper">
        <!-- Append global wrapper open -->
        <if>
            <istrue value="${wrapper}" />
            <then>
                <echo file="${buildpath}/99-wrapper-open.js">(function($, window, rangy, undefined) {</echo>
            </then>
        </if>
    </target>

    <!-- =================================================================== -->
    <!-- Compile (minify) all files                                          -->
    <!-- =================================================================== -->
    <target name="compile">
        <if>
            <istrue value="${compile-js}" />
            <then>
                <echo>closure --js ${buildpath}/concat.js --js_output_file ${buildpath}/concat.min.js</echo>
                <exec command="closure ${closure-options} --js ${buildpath}/concat.js --js_output_file ${buildpath}/concat.min.js"
                      dir="." level="info" outputProperty="output" />
                <echo>${output}</echo>
            </then>
            <else>
                <move file="${buildpath}/concat.js" tofile="${buildpath}/concat.min.js" />
            </else>
        </if>
        <if>
            <istrue value="${compile-css}" />
            <then>
                <echo>yui-compressor --type css -o ${buildpath}/concat.min.css ${buildpath}/concat.css</echo>
                <exec command="yui-compressor --type css -o ${buildpath}/concat.min.css ${buildpath}/concat.css"
                      dir="." level="info" outputProperty="output" />
                <echo>${output}</echo>
            </then>
            <else>
                <move file="${buildpath}/concat.css" tofile="${buildpath}/concat.min.css" />
            </else>
        </if>
    </target>

    <!-- =================================================================== -->
    <!-- Merge CSS and JS into one file                                      -->
    <!-- =================================================================== -->
    <target name="merge">
        <!-- Append VERSION file in a comment -->
        <echo file="${buildpath}/merge.js" append="true">/*! VERSION: ${version} </echo>
        <!-- Append a new line -->
        <echo file="${buildpath}/merge.js" append="true">
        </echo>
        <!-- Append LICENCE file in the same comment -->
        <append destFile="${buildpath}/merge.js">
            <fileset dir=".">
                <include name="${buildpath}/LICENCE" />
            </fileset>
        </append>
        <echo file="${buildpath}/merge.js" append="true">*/</echo>
        <!-- Close the comment -->

        <!-- Append the merged JS -->
        <append destFile="${buildpath}/merge.js">
            <fileset dir=".">
                <include name="${buildpath}/concat.min.js" />
            </fileset>
        </append>

        <!-- Append the style inserter -->
        <echo file="${buildpath}/merge.js" append="true"><![CDATA[jQuery('<style type="text/css">]]></echo>

        <reflexive>
            <fileset dir="${buildpath}">
                <include pattern="concat.min.css" />
            </fileset>
            <filterchain>
                <!-- Escape quotes -->
                <replaceregexp>
                    <regexp pattern="'" replace="\'" />
                    <regexp pattern="\n" replace="\n\${line.separator}" />
                </replaceregexp>
            </filterchain>
        </reflexive>
        <append destFile="${buildpath}/merge.js">
            <fileset dir=".">
                <include name="${buildpath}/concat.min.css" />
            </fileset>
        </append>
        <echo file="${buildpath}/merge.js" append="true"><![CDATA[</style>').appendTo('head');]]></echo>
    </target>

    <!-- =================================================================== -->
    <!-- Package files                                                       -->
    <!-- =================================================================== -->
    <target name="package">
        <mkdir dir="${packagepath}" />
        <copy file="${buildpath}/merge.js" tofile="${packagepath}/${filename}" />
        <echo>${packagepath}/${filename}</echo>
    </target>

    <target name="targz">
        <!--
        <tar destfile="${packagepath}/${filename}.tar.gz" compression="gzip">
            <fileset dir="${packagepath}">
                <include name="${filename}" />
            </fileset>
        </tar>
        -->
    </target>

    <!-- =================================================================== -->
    <!-- Adhoc classes                                                       -->
    <!-- =================================================================== -->
    <adhoc-task name="datauri">
        require_once '${project.basedir}/classes/DataURI.php';
    </adhoc-task>

    <adhoc-task name="sortedfileset">
        require_once '${project.basedir}/classes/SortedFileSet.php';
    </adhoc-task>

    <adhoc-task name="template">
        require_once '${project.basedir}/classes/TemplateTask.php';
    </adhoc-task>

</project>
